# Production Docker Compose for Zenith PDF Chatbot
version: '3.8'

services:
  qdrant:
    image: qdrant/qdrant:latest
    container_name: zenith-qdrant-prod
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage:z
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
    restart: unless-stopped
    networks:
      - zenith-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  zenith-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: zenith-api-prod
    ports:
      - "8000:8000"
    environment:
      - QDRANT_URL=qdrant
      - QDRANT_PORT=6333
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./temp_pdfs:/app/temp_pdfs
    depends_on:
      qdrant:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - zenith-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  zenith-ui:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    container_name: zenith-ui-prod
    ports:
      - "8501:8501"
    environment:
      - QDRANT_URL=qdrant
      - QDRANT_PORT=6333
      - API_URL=http://zenith-api:8000
      - PYTHONPATH=/app
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./temp_pdfs:/app/temp_pdfs
    depends_on:
      zenith-api:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - zenith-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: zenith-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs
    depends_on:
      - zenith-api
      - zenith-ui
    restart: unless-stopped
    networks:
      - zenith-network
    profiles:
      - proxy

networks:
  zenith-network:
    driver: bridge

volumes:
  qdrant_storage:
